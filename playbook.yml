- name: Ansible examples
  hosts: centos
  become: yes
  become_user: root
  become_method: sudo
  ignore_errors: yes

  tasks:

    - name: CHECK OS VERSION ON SYSTEM
      debug:
        msg:
          - "Hostname: {{ inventory_hostname }}"
          - "Distribution: {{ ansible_distribution }}"
          - "Major version: {{ ansible_distribution_major_version|int }}"
          - "Full version: {{ ansible_distribution_version }}"
          - "OS family: {{ ansible_os_family }}"
          - "Main IP: {{ ansible_default_ipv4.address|default(ansible_all_ipv4_addresses[0]) }}"

    - name: SUPPORTED OS
      assert:
        that:
          - ( ansible_distribution == 'CentOS'     and ( ansible_distribution_major_version == '7' )) or
            ( ansible_distribution == 'CentOS'     and ( ansible_distribution_major_version == '8' ))
        fail_msg: "{{ ansible_distribution }} {{ ansible_distribution_version }} is not supported, host will be skipped"
        success_msg: "{{ ansible_distribution }} {{ ansible_distribution_version }} is supported"
      ignore_errors: false

    - name: Run only on currently allowed distributions
      debug: msg="{{ ansible_distribution }} is not yet supported"
      when:
        - ansible_distribution != 'RedHat'
        - ansible_distribution != 'CentOS'
      failed_when: true
    
    - name: INSTALL A LIST OF PACKAGES THAT ARE NOT ALREADY INSTALLED
      package:
        name:
         - curl
         - unzip
         - httpd
        state: present # present, latest, absent, installed

    - name: CHECK IF IS URL WISIBLE FROM REMOTE SRV
      shell: curl -I https://www.preporu.com
      changed_when: False
    
    - name: START AND ENABLE HTTP SERVICE
      service:
        name: httpd
        state: started # started, stopped, restarted, reloaded
        enabled: yes

    - name: CHECK IF FOLDER /home EXISTS
      stat:
        path: '/home'
      register: folder_check
      failed_when: ( not folder_check.stat.exists ) or ( not folder_check.stat.isdir )

    - name: SHOW OUTPUT FROM SOME COMMAND'S
      block:
        - name: === run command on remote host ===
          shell: uptime ; hostnamectl set-hostname "tomka.lab"
          register: output
        - name: === display output ===
          debug: msg="{{ output.stdout_lines }}"
    
    - name: CREATE DIRECTORY IF NOT EXISTS
      file:
        path: /home/bkp
        state: directory
        owner: root
        group: root
        mode: 0775
    
    - name: CREATE FILE WITH SOME CONTENT (OVERWRITE FILE IF EXISTS)
      copy:
        dest: "/home/bkp/README.md"
        owner: root
        group: root
        mode: '0644'
        content: |
          ***************************************
          This is the file where we can writte:
          - Content of this folder
          ***************************************

    - name: ADD NEW LINE TO THE FILE AT THE BOTTOM
      lineinfile:
        dest: /home/bkp/README.md
        line: "{{ item.line }}"
        create: yes
      with_items:
        - { line: 'line1' }
        - { line: 'line2' }
        - { line: 'line3' }

    - name: BACKUP MULTIPLE LOCATIONS
      copy: 
        src: "{{ item.src }}" 
        dest: "{{ item.dest }}"
      loop:
        - src: /etc/profile
          dest: /home/bkp/profile-bkp
        - src: /etc/hosts
          dest: /home/bkp/hosts-bkp
        - src: /etc/ssh/sshd_config
          dest: /home/bkp/sshd_config-bkp
        - src: /etc/fstab
          dest: /home/bkp/fstab-bkp
    
    - name: CHECK IF FIREWALL SERVICE RUNNING
      block:
        - name: === get service facts ===
          service_facts:
        - debug:
            msg: "Service firewalld.service is running"
          when: ansible_facts.services['firewalld.service'].state == "running"

    - name: EXTRACT COMPRESED FILE FROM LOCAL TO REMOTE
      unarchive:
        src: /home/lab/Ansible/script.tar.gz
        dest: /home/
    
    - name: COPY FILE FROM LOCAL TO REMOTE
      become: true 
      copy:
        src: /home/lab/Ansible/script.sh
        dest: /home/
        owner: apache
        group: apache        
        mode: 0775

    - name: SETUP CRONEJOB
      cron:
        name: "=== add some crone job ==="
        minute: "0"
        hour: "3"
        weekday: "3"
        job: "/home/script.sh &>> /var/log/script.log"

    - name: SETUP FIREWALL IF IS RUNNING
      block:
        - name: === get service facts ===
          service_facts:
        - name: === open http and https on firewalld ===
          firewalld:
            service: "{{ item }}"
            permanent: yes
            immediate: yes
            state: enabled
          loop:
            - https
            - http
            - mysql
          when: ansible_facts.services['firewalld.service'].state == "running"
        - name: === firewalld to open port 1111/tcp ===
          firewalld:
            port: 1111/tcp
            immediate: yes
            permanent: yes
            state: enabled
          when: ansible_facts.services['firewalld.service'].state == "running"
      tags: FIREWALLD_SERVICE

    - name: COMPRESS HOME IN HOME.TAR.GZ
      archive:
        path: /home
        dest: /home.tar.gz
        format: gz

    - name: ADD GROUP ADMINS TO THE REMOTE SRV
      group:
        name: admins
        gid: 2010
        state: present

    - name: ADD USER admin TO THE REMOTE SRV
      user:
        name: admin
        comment: "Privileged Admin User"
        password: "{{ '12345' | password_hash('sha512') }}"
        state: present
        createhome: yes
        home: /home/administrator
        uid: 2001
        group: admins
        groups: wheel,root
        append: yes
        shell: /bin/bash

    - name: FORCE USER admin TO CHANGE PASSWORD
      command: 
          chage -d 0 admin

    - name: REBOOT SYSTEM
      reboot:
        connect_timeout: 5
        reboot_timeout: 600
        pre_reboot_delay: 0
        post_reboot_delay: 30
